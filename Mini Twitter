/**
 * Definition of Tweet:
 * public class Tweet {
 *     public int id;
 *     public int user_id;
 *     public String text;
 *     public static Tweet create(int user_id, String tweet_text) {
 *         // This will create a new tweet object,
 *         // and auto fill id
 *     }
 * }
 */
public class MiniTwitter {
    
    class Node {
        public int order;
        public Tweet tweet;
        public Node(int o, Tweet t) {
            order = o;
            tweet = t;
        }
    }
    class CompareNode implements Comparator {
        public int compare(Object o1, Object o2) {
            Node n1 = (Node) o1;
            Node n2 = (Node) o2;
            if (n1.order > n2.order) {
                return -1;
            } else {
                return 1;
            }
        }
    }
    
    private Map<Integer, List<Node>> users_tweets;
    private Map<Integer, Map<Integer, Boolean>> friends;
    private int order;
    
    public MiniTwitter() {
        users_tweets = new HashMap<Integer, List<Node>>();
        friends = new HashMap<Integer, Map<Integer, Boolean>>();
        order = 0;
    }

    // @param user_id an integer
    // @param tweet a string
    // return a tweet
    public Tweet postTweet(int user_id, String tweet_text) {
        if (!friends.containsKey(user_id)) {
            friends.put(user_id, new HashMap<Integer, Boolean>());
            friends.get(user_id).put(user_id, true);
        }
        if (!users_tweets.containsKey(user_id)) {
            users_tweets.put(user_id, new ArrayList<Node>());
        }
        Tweet tweet = Tweet.create(user_id, tweet_text);
        users_tweets.get(user_id).add(new Node(order++, tweet));
        return tweet;
    }



            
    private List<Node> LatestTenNodes(List<Node> friendNodes) {
        int first = friendNodes.size() < 10 ? 0 : friendNodes.size() - 10;
        return friendNodes.subList(first, friendNodes.size());
    }
                    
    // @param user_id an integer
    // return a list of 10 new feeds recently
    // and sort by timeline
    public List<Tweet> getNewsFeed(int user_id) {
        List<Tweet> newsFeed = new ArrayList<Tweet>();
        List<Node> newsFeedNodes = new ArrayList<Node>();
        if (friends.containsKey(user_id)) {
            for (Map.Entry<Integer, Boolean> entry : friends.get(user_id).entrySet()) {
                int friend = entry.getKey();
                if (users_tweets.containsKey(friend)) {
                    newsFeedNodes.addAll(LatestTenNodes(users_tweets.get(friend)));
                }
            }
        }
        Collections.sort(newsFeedNodes, new CompareNode());
        int count = 0;
        for (Node node : newsFeedNodes) {
            if (count == 10) {
                break;
            }
            newsFeed.add(node.tweet);
            count++;
        }
        return newsFeed;
    }
        
    // @param user_id an integer
    // return a list of 10 new posts recently
    // and sort by timeline
    public List<Tweet>  getTimeline(int user_id) {
        List<Tweet> timeline = new ArrayList<Tweet>();
        if (users_tweets.containsKey(user_id)) {
            List<Node> list = users_tweets.get(user_id);
            int count = 0;
            for (int i =  list.size() - 1; i >= 0; i--) {
                if (count == 10) {
                    break;
                }
                timeline.add(list.get(i).tweet);
                count++;
            } 
        }
        return timeline;
    }

    // @param from_user_id an integer
    // @param to_user_id an integer
    // from user_id follows to_user_id
    public void follow(int from_user_id, int to_user_id) {
        if (!friends.containsKey(from_user_id)) {
            friends.put(from_user_id, new HashMap<Integer, Boolean>());
            friends.get(from_user_id).put(from_user_id, true);
        }
        friends.get(from_user_id).put(to_user_id, true);
    }

    // @param from_user_id an integer
    // @param to_user_id an integer
    // from user_id unfollows to_user_id
    public void unfollow(int from_user_id, int to_user_id) {
        if (friends.containsKey(from_user_id)) {
            friends.get(from_user_id).remove(to_user_id);
        }
    }
}
