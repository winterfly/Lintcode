/**
 * Definition for ListNode.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int val) {
 *         this.val = val;
 *         this.next = null;
 *     }
 * }
 */ 
public class Solution {
    /**
     * @param head: The head of linked list.
     * @return: void
     */
    private ListNode findMiddle(ListNode head) {
        ListNode slow = head;
        ListNode fast = head.next;
        while (fast != null && fast.next != null) {
            slow = slow.next;
            fast = fast.next.next;
        }
        return slow;
    }
    
    private ListNode reverse(ListNode head) {
        ListNode newHead = null;
        while (head != null) {
            ListNode temp = head.next;
            head.next = newHead;
            newHead = head;
            head = temp;
        }
        return newHead;
    }
    
    public void reorderList(ListNode head) {  
        if (head == null || head.next == null || head.next.next == null) {
            return;
        }
        
        ListNode middle = findMiddle(head);
        ListNode tail = reverse(middle.next);
        middle.next = null;
        
        ListNode first = head;
        while (tail != null) {
             ListNode temp1 = first.next;
             ListNode temp2 = tail.next;
             first.next = tail;
             tail.next = temp1;
             first = temp1;
             tail = temp2;
        }
        
    }
}
