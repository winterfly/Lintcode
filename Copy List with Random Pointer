/**
 * Definition for singly-linked list with a random pointer.
 * class RandomListNode {
 *     int label;
 *     RandomListNode next, random;
 *     RandomListNode(int x) { this.label = x; }
 * };
 */
public class Solution {
    /**
     * @param head: The head of linked list with a random pointer.
     * @return: A new head of a deep copy of the list.
     */
    public RandomListNode copyRandomList(RandomListNode head) {
        if (head == null) {
            return null;
        }
        
        RandomListNode current = head;
        while (current != null) {
            RandomListNode temp = new RandomListNode(current.label);
            temp.next = current.next;
            current.next = temp;
            current = temp.next;
        }
        
        current = head;
        while (current != null) {
            if (current.random == null) {
                current.next.random = null;
            } else {
                current.next.random = current.random.next;
            }
            current = current.next.next;
        }
        
        RandomListNode dummyNew = new RandomListNode(0);
        current = head;
        RandomListNode currentNew = dummyNew;
        while (current != null) {
            RandomListNode temp = current.next;
            currentNew.next = temp;
            current = temp.next;
            currentNew = temp;
        }
        
        return dummyNew.next;
        
    }
}
